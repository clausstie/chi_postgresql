# <plugin name>=<plugin class name>$<plugin JAR URL>$<parameters>$<default tag name>$<description>$<helptext>$<exampletext>
# important: plugins cannot have -c options because it is in conflict with the
# general option -c --config.
# separate parameter description items by ';' (will be separated by newline
# characters) in <helptext>
# do not use $ characters except for field separation
# <exampletext> is optional

majorms=$chemaxon.marvin.calculations.MajorMicrospeciesPlugin\
	$MajorMicrospeciesPlugin.jar\
	$H=pH;f=format\
	$MAJORMS\
	$Major microspecies at given pH.\
	$-H, --pH=<pH value> gets major microspecies at this pH\n(default: no pH, all microspecies);-f, --format=<output format> (default: smiles)\
	$cxcalc majorms -H 3.5 -f mol test.mol

msdistr=$chemaxon.marvin.calculations.MajorMicrospeciesPlugin\
	$MajorMicrospeciesPlugin.jar\
	$H=pH:7.4;f=format:sdf:-a;t=tag;msdistr=msdistr:true\
	$MSDISTR\
	$Microspecies list with distributions at given pH.\
	$-H, --pH=<pH value> gets major microspecies at this pH\n(default: 7.4);-f, --format=<output format> (default: sdf:-a);-t, --tag=<SDF/MRV tag to store the distribution value>\n(default: MSDISTR[pH=...])\
	$cxcalc msdistr -H 3.5 test.mol

tautomers=$chemaxon.marvin.calculations.TautomerizationPlugin\
	$MultiformPlugin.jar\
	$s=symfilter:true;d=dominants:false;H=pH;f=format;g=single:false\
	$TAUTOMERS\
	$Tautomers.\
	$-s, --symfilter=[true|false]\ntrue: filter out symmetrical structures\nfalse: allow duplicates\n(default: true);-d, --dominants=[true|false]\ntrue: take dominant tautomers\n(default: false);-H, --pH=<pH value> considers pH effect at this pH\n(default: do not consider pH effect);-f, --format=<output format> (default: fused smiles,\nmultiple molecule output if specified);-g, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc tautomers -f sdf test.mol

tautomercount=$chemaxon.marvin.calculations.TautomerizationPlugin\
	$MultiformPlugin.jar\
	$s=symfilter:true;d=dominants:false;H=pH;t=type:count;g=single:false\
	$TAUTOMER_COUNT\
	$The number of tautomers.\
	$-s, --symfilter=[true|false]\ntrue: filter out symmetrical structures\nfalse: allow duplicates\n(default: true);-d, --dominants=[true|false]\ntrue: take dominant tautomers\n(default: false);-H, --pH=<pH value> considers pH effect at this pH\n(default: do not consider pH effect);-g, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc tautomerCount -s false test.mol

resonants=$chemaxon.marvin.calculations.ResonancePlugin\
	$MultiformPlugin.jar\
	$s=symfilter:true;H=pH;f=format;m=mcontrib:true;g=single:false\
	$RESONANTS\
	$Resonant structures.\
	$-s, --symfilter=[true|false]\ntrue: filter out symmetrical structures\nfalse: allow duplicates\n(default: true);-H, --pH=<pH value> considers pH effect at this pH\n(default: do not consider pH effect);-f, --format=<output format> (default: fused smiles,\nmultiple molecule output if specified);-m, --mcontrib=[true|false]\ntrue: take major contributors\n(default: true);-g, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc resonants -f sdf test.mol

resonantcount=$chemaxon.marvin.calculations.ResonancePlugin\
	$MultiformPlugin.jar\
	$s=symfilter:true;H=pH;t=type:count;m=mcontrib:true;g=single:false\
	$RESONANT_COUNT\
	$The number of resonant structures.\
	$-s, --symfilter=[true|false]\ntrue: filter out symmetrical structures\nfalse: allow duplicates\n(default: true);-H, --pH=<pH value> considers pH effect at this pH\n(default: do not consider pH effect);-m, --mcontrib=[true|false]\ntrue: take major contributors\n(default: true);-g, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc resonantCount test.mol

charge=$chemaxon.marvin.calculations.ChargePlugin\
	$ChargePlugin.jar\
	$p=precision:2;t=type:total;i=implh:false;r=resonance:false;H=pH\
	$CHARGE\
	$Partial charge calculation.\nTypes aromaticsystem / aromaticring calculate the sum of charges\nin the aromatic system / aromatic ring containing the atom.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[sigma|pi|total|implh|\naromaticsystem|aromaticsystemsigma|aromaticsystempi|\naromaticring|aromaticringsigma|aromaticringpi]\n(default: total);-i, --implh=[true|false] implicit H charge sum shown in brackets\n(for sigma and total charge only) (default: false);-r, --resonance=[true|false]\ntrue: take resonant structures (default: false);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc -S -o result.sdf -t myCHARGE charge -t pi,total -p 3 test.mol

huckel=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$p=precision:2;t=type:order,localizationenergy,pienergy,pichargedensity,totalchargedensity;H=pH\
	$HUCKEL\
	$Huckel analysis parameters.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[order|order:e|order:n|\nlocalizationenergy|\nlocalizationenergy:e|localizationenergy:n|\npienergy|pichargedensity|totalchargedensity]\n(default: order,localizationenergy,\npienergy,pichargedensity,totalchargedensity);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc -S -o result.sdf huckel -H 7.4 -p 3 test.mol

order=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$t=type:order;s=subtype:e,n;H=pH\
	$ORDER\
	$Order in E(+)/Nu(-) attack.\
	$-s, --subtype=[e|n|en] e: electrophilic, n: nucleophilic, en: both (default: en);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc order -t order:e -H 7.4 test.mol

energy=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$p=precision:2;t=type:localizationenergy;s=subtype:e,n;H=pH\
	$ENERGY\
	$Localization energy L(+)/L(-).\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --subtype=[e|n|en] e: electrophilic, n: nucleophilic, en: both (default: en);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc energy test.mol

pienergy=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$p=precision:2;t=type:pienergy;H=pH\
	$PI_ENERGY\
	$Pi energy.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc pienergy test.mol

pichargedensity=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$p=precision:2;t=type:pichargedensity;H=pH\
	$PICHARGE_DENSITY\
	$Pi charge density.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc pichargedensity -p 4 -H 6.5 test.mol

totalchargedensity=$chemaxon.marvin.calculations.HuckelAnalysisPlugin\
	$HuckelAnalysisPlugin.jar\
	$p=precision:2;t=type:totalchargedensity;H=pH\
	$TOTALCHARGE_DENSITY\
	$Total charge density.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc totalchargedensity -p 4 -H 6.5 test.mol

polarizability=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular,atomic;H=pH\
	$POLARIZABILITY\
	$Atomic and molecular polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[molecular|atomic] (default: both);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc polarizability -p 3 test.mol

pol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular,atomic;H=pH\
	$POLARIZABILITY\
	$Atomic and molecular polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[molecular|atomic] (default: both);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc pol -p 3 test.mol

atompol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:atomic;H=pH\
	$ATOM_POLARIZABILITY\
	$Atomic polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc atompol test.mol

molpol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular;H=pH\
	$MOL_POLARIZABILITY\
	$Molecular polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc molpol test.mol

tpol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular,a(xx),a(yy),a(zz);D=geom3D:true;H=pH\
	$THOLE_POLARIZABILITY\
	$Calculation of average molecular polarizability and\nprincipal components of polarizability tensor (axx, ayy, azz).\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc tpol test.mol

tpolarizability=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular,a(xx),a(yy),a(zz);D=geom3D:true;H=pH\
	$THOLE_POLARIZABILITY\
	$Calculation of average molecular polarizability and\nprincipal components of polarizability tensor (axx, ayy, azz).\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc tpolarizability test.mol

avgpol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular;D=geom3D:true;H=pH\
	$AVERAGE_MOL_POLARIZABILITY\
	$Average molecular polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc avgpol test.mol

averagepol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:molecular;D=geom3D:true;H=pH\
	$AVERAGE_MOL_POLARIZABILITY\
	$Average molecular polarizability calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc averagepol test.mol

axxpol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:a(xx);D=geom3D:true;H=pH\
	$AXX_POLARIZABILITY\
	$Calculation of principal component of polarizability tensor axx.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc axxpol test.mol

ayypol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:a(yy);D=geom3D:true;H=pH\
	$AXX_POLARIZABILITY\
	$Calculation of principal component of polarizability tensor ayy.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc ayypol test.mol

azzpol=$chemaxon.marvin.calculations.PolarizabilityPlugin\
	$PolarizabilityPlugin.jar\
	$p=precision:2;t=type:a(zz);D=geom3D:true;H=pH\
	$AZZ_POLARIZABILITY\
	$Calculation of principal component of polarizability tensor azz.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc azzpol test.mol

pka=$chemaxon.marvin.calculations.pKaPlugin\
	$pKaPlugin.jar\
	$p=precision:2;t=type:pKa;m=mode:macro;i=min:-10;x=max:20;T=temperature:298;n=ions:8;d=model:small;a=na:2;b=nb:2\
	$PKA\
	$pKa calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[pKa|acidic|basic] (default: pKa);-m, --mode=[macro|micro] (default: macro);-d, --model=[small|large] calculation model\nsmall: optimized for at most 8 ionizable atoms\nlarge: optimized for a large number of ionizable atoms\n(default: small);-i, --min=min basic pKa (default: -10);-x, --max=max acidic pKa (default: 20);-T, --temperature=temperature (default: 298 Kelvin);-a, --na=number of acidic pKa values displayed (default: 2);-b, --nb=number of basic pKa values displayed (default: 2)\
	$cxcalc pka -i -15 -x 25 -a 3 -b 3 -d large test.mol

pi=$chemaxon.marvin.calculations.IsoelectricPointPlugin\
	$IsoelectricPointPlugin.jar\
	$p=precision:2;t=type:pI\
	$PI\
	$Isoelectric point calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2)\
	$cxcalc pI test.mol

logp=$chemaxon.marvin.calculations.logPPlugin\
	$logPPlugin.jar\
	$p=precision:2;a=anion:0.1;k=kation:0.1;t=type:logPTrue;i=inch:false\
	$LOGP\
	$logP calculation:\nfor type logPTrue: logP of uncharged species, or,\nin the case of zwitterions, logD at pI;\nfor type logPMicro: logP of the input species.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-a, --anion=<Cl- concentration> (default: 0.1, range: [0.0, 0.25]);-k, --kation=<Na+ K+ concentration> (default: 0.1, range: [0.0, 0.25]);-t, --type=[increments|inch|logPMicro|logPTrue] (default: logPTrue);-i, --inch=[true|false] incremental logP on H atoms shown in brackets\n(for incremental logP only) (default: false)\
	$cxcalc -S -t myLOGP logp -a 0.15 -k 0.05 test.mol

logd=$chemaxon.marvin.calculations.logDPlugin\
	$logDPlugin.jar\
	$p=precision:2;a=anion:0.1;k=kation:0.1;H=pH:;l=lower:0;u=upper:14;s=step:1;1=ref1:;2=ref2:;3=ref3:;4=ref4:\
	$LOGD\
	$logD calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-a, --anion=<Cl- concentration> (default: 0.1, range: [0.0, 0.25]);-k, --kation=<Na+ K+ concentration> (default: 0.1, range: [0.0, 0.25]);-H, --pH=<pH value> takes logD at this pH\n(default: no single pH, takes pH values in interval\n[lower, upper] by given step size);-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1);-1, --ref1=<pH reference 1> (default: none);-2, --ref2=<pH reference 2> (default: none);-3, --ref3=<pH reference 3> (default: none);-4, --ref4=<pH reference 4> (default: none)\
	$cxcalc -i ID logd -l 2 -u 3 -s 0.5 test.sdf 

psa=$chemaxon.marvin.calculations.TPSAPlugin\
	$TPSAPlugin.jar\
	$p=precision:2;H=pH\
	$PSA\
	$Topological Polar Surface Area calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc -S -t myPSA psa test.mol

elemanal=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$t=type:formula,isotopeformula,dotdisconnectedformula,mass,exactmass,composition,isotopecomposition,atomcount;s=single:false\
	$ELEMANAL\
	$Molecule data calculation: formula, isotopeformula, mass, exactmass,\ncomposition, isotopecomposition, atomcount.\
	$-t, --type=[formula|isotopeformula|mass|exactmass|\ncomposition|isotopecomposition|atomcount] (default: all);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc elemanal -t mass,composition,formula test.mol

mass=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$p=precision:3;t=type:mass;s=single:false\
	$MASS\
	$Molecule mass calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 3);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc mass test.mol

exactmass=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$p=precision:6;t=type:exactmass;s=single:false\
	$EXACTMASS\
	$Exact molecule mass calculation based on the most frequent\nnatural isotopes of the elements.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 6);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc exactmass test.mol

formula=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$t=type:formula;s=single:false\
	$FORMULA\
	$Molecular formula calculation.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc formula -s true test.mol

iformula=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$t=type:isotopeformula;s=single:false\
	$ISOTOPEFORMULA\
	$Molecular formula calculation, isotopes included.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc iformula -s true test.mol

dotdisconnectedformula=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$t=type:dotdisconnectedformula;s=single:false\
	$DOTDISCONNECTEDFORMULA\
	$Dot-disconnected molecular formula calculation.\
	$cxcalc dotdisconnectedformula test.mol

composition=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$p=precision:2;t=type:composition;s=single:false\
	$COMPOSITION\
	$Elemental composition calculation (w/w%).\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc composition -s true test.mol

icomposition=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$p=precision:2;t=type:isotopecomposition;s=single:false\
	$ISOTOPECOMPOSITION\
	$Elemental composition calculation, isotopes included (w/w%).\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc icomposition -s true test.mol

atomcount=$chemaxon.marvin.calculations.ElementalAnalyserPlugin\
	$ElementalAnalyserPlugin.jar\
	$z=atno;m=massno;t=type:atomcount;s=single:false\
	$COUNTOF\
	$Number of atoms in the molecule: \n\
	no atno: counts all atoms in the molecule;\n\
	atno, but no massno: counts atoms of the given type in the molecule;\n\
	atno, massno: counts atoms of the given isotope type in the molecule;\n\
	atno, massno=0: counts atoms of the given type in the molecule,\n                but excludes its isotopes.\
	$-z, --atno=<atomic number>;-m, --massno=<mass number>;-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc atomcount -z 7 test.mol

topanal=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:atomcount,aliphaticatomcount,aromaticatomcount,bondcount,aliphaticbondcount,aromaticbondcount,rotatablebondcount,ringcount,aliphaticringcount,aromaticringcount,heteroringcount,heteroaromaticringcount,ringatomcount,ringbondcount,chainatomcount,chainbondcount,smallestringsize,largestringsize;s=single:false\
	$TOPANAL\
	$Molecule topology data calculation: atomcount,aliphaticatomcount,aromaticatomcount,\nbondcount,aliphaticbondcount,aromaticbondcount,rotatablebondcount,\nringcount,aliphaticringcount,aromaticringcount,heteroringcount,aromaticheteroringcount,\nringatomcount,ringbondcount,chainatomcount,chainbondcount,\nsmallestringsize,largestringsize.\
	$-t, --type=[atomcount|aliphaticatomcount|aromaticatomcount|\nbondcount|aliphaticbondcount|aromaticbondcount|rotatablebondcount|\nringcount|aliphaticringcount|aromaticringcount|heteroringcount|aromaticheteroringcount|\nringatomcount|ringbondcount|chainatomcount|chainbondcount|\nsmallestringsize|largestringsize] (default: all);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc topanal test.mol

aliphaticatomcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aliphaticatomcount;s=single:false\
	$ALIPHATIC_ATOMCOUNT\
	$Aliphatic atom count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aliphaticatomcount test.mol

aromaticatomcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aromaticatomcount;s=single:false\
	$AROMATIC_ATOMCOUNT\
	$Aromatic atom count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aromaticatomcount test.mol

bondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:bondcount;s=single:false\
	$BONDCOUNT\
	$Bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc bondcount test.mol

aliphaticbondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aliphaticbondcount;s=single:false\
	$ALIPHATIC_BONDCOUNT\
	$Aliphatic bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aliphaticbondcount test.mol

aromaticbondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aromaticbondcount;s=single:false\
	$AROMATIC_BONDCOUNT\
	$Aromatic bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aromaticbondcount test.mol

rotatablebondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:rotatablebondcount;s=single:false\
	$ROTATABLE_BONDCOUNT\
	$Rotatable bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc rotatablebondcount test.mol

ringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringcount;s=single:false\
	$RINGCOUNT\
	$Ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc ringcount test.mol

aliphaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aliphaticringcount;s=single:false\
	$ALIPHATIC_RINGCOUNT\
	$Aliphatic ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aliphaticringcount test.mol

aromaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aromaticringcount;s=single:false\
	$AROMATIC_RINGCOUNT\
	$Aromatic ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aromaticringcount test.mol

heteroringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:heteroringcount;s=single:false\
	$HETERO_RINGCOUNT\
	$Hetero ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc heteroringcount test.mol

heteroaromaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:heteroaromaticringcount;s=single:false\
	$HETEROAROMATIC_RINGCOUNT\
	$Heteroaromatic ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc heteroaromaticringcount test.mol

carboringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:carboringcount;s=single:false\
	$CARBO_RINGCOUNT\
	$Carbo ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc carboringcount test.mol

carboaromaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:carboaromaticringcount;s=single:false\
	$CARBOAROMATIC_RINGCOUNT\
	$Carboaromatic ring count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc carboaromaticringcount test.mol

ringatomcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringatomcount;s=single:false\
	$RINGATOMCOUNT\
	$Ring atom count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc ringatomcount test.mol

ringbondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringbondcount;s=single:false\
	$RINGBONDCOUNT\
	$Ring bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc ringbondcount test.mol

chainatomcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:chainatomcount;s=single:false\
	$CHAINATOMCOUNT\
	$Chain atom count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc chainatomcount test.mol

chainbondcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:chainbondcount;s=single:false\
	$CHAINBONDCOUNT\
	$Chain bond count.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc chainbondcount test.mol

smallestringsize=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:smallestringsize;s=single:false\
	$SMALLEST_RINGSIZE\
	$Smallest ring size.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc smallestringsize test.mol

largestringsize=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:largestringsize;s=single:false\
	$LARGEST_RINGSIZE\
	$Largest ring size.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc largestringsize test.mol

fusedringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:fusedringcount;s=single:false\
	$FUSED_RINGCOUNT\
	$The number of fused rings\n(SSSR smallest set of smallest rings).\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc fusedringcount test.mol

fusedaliphaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:fusedaliphaticringcount;s=single:false\
	$FUSEDALIPHATIC_RINGCOUNT\
	$The number of fused aliphatic rings\n(SSSR smallest set of smallest aliphatic rings).\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc fusedaliphaticringcount test.mol

fusedaromaticringcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:fusedaromaticringcount;s=single:false\
	$FUSEDAROMATIC_RINGCOUNT\
	$The number of fused aromatic rings\n(SSSR smallest set of smallest aromatic rings).\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc fusedaromaticringcount test.mol

asymmetricatomcount=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:asymmetricatomcount;s=single:false\
	$ASYMMETRIC_ATOMCOUNT\
	$The number of asymmetric atoms.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc asymmetricatomcount test.mol

cyclomaticnumber=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:cyclomaticnumber;s=single:false\
	$CYCLOMATIC_NUMBER\
	$The cyclomatic number.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc cyclomaticnumber test.mol

plattindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:plattindex;s=single:false\
	$PLATT_INDEX\
	$The Platt index.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc plattindex test.mol

randicindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:randicindex;p=precision:2;s=single:false\
	$RANDIC_INDEX\
	$The Randic index.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc randicindex test.mol

balabanindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:balabanindex;p=precision:2;s=single:false\
	$BALABAN_INDEX\
	$The Balaban index.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc balabanindex test.mol

distancedegree=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:distancedegree;s=single:false\
	$DISTANCE_DEGREE\
	$Distance degree of atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc distancedegree test.mol

eccentricity=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:eccentricity;s=single:false\
	$ECCENTRICITY\
	$Eccentricity of atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc eccentricity test.mol

hararyindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:hararyindex;p=precision:2;s=single:false\
	$HARARY_INDEX\
	$Harary index.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc hararyindex test.mol

hyperwienerindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:hyperwienerindex;s=single:false\
	$HYPERWIENER_INDEX\
	$Hyper Wiener index.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc hyperwienerindex test.mol

szegedindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:szegedindex;s=single:false\
	$SZEGED_INDEX\
	$Szeged index.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc szegedindex test.mol

wienerindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:wienerindex;s=single:false\
	$WIENER_INDEX\
	$Wiener index.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc wienerindex test.mol

wienerpolarity=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:wienerpolarity;s=single:false\
	$WIENER_POLARITY\
	$Wiener polarity.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc wienerpolarity test.mol

stericeffectindex=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:stericeffectindex;p=precision:2;s=single:false\
	$STERICEFFECT_INDEX\
	$Steric effect index.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc stericeffectindex test.mol

aromaticatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aromaticatom;s=single:false\
	$AROMATIC_ATOM\
	$Checks if a specified atom is aromatic.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aromaticatom test.mol

aliphaticatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:aliphaticatom;s=single:false\
	$ALIPHATIC_ATOM\
	$Checks if a specified atom is aliphatic.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc aliphaticatom test.mol

chainatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:chainatom;s=single:false\
	$CHAIN_ATOM\
	$Checks if a specified atom is a chain atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc chainatom test.mol

ringatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringatom;s=single:false\
	$RING_ATOM\
	$Checks if a specified atom is a ring atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc ringatom test.mol

asymmetricatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:asymmetricatom;s=single:false\
	$ASYMMETRIC_ATOM\
	$Checks if a specified atom is an asymmetric atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc asymmetricatom test.mol

smallestatomringsize=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:smallestatomringsize;s=single:false\
	$SMALLEST_ATOM_RINGSIZE\
	$Size of smallest ring containing a specified atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc smallestatomringsize test.mol

largestatomringsize=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:largestatomringsize;s=single:false\
	$LARGEST_ATOM_RINGSIZE\
	$Size of largest ring containing a specified atom.\
	$-s, --single=[true|false] in case of multi-fragment molecules:\ntakes largest fragment if true,\ntakes whole molecule if false (default: false)\
	$cxcalc largestatomringsize test.mol

shortestpath=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:shortestpath;a=atoms;s=single:false\
	$SHORTEST_PATH\
	$Length of shortest path between two atoms.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the atom pair\
	$cxcalc shortestpath -a 2-3 test.mol

connected=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:connected;a=atoms;s=single:false\
	$CONNECTED\
	$Checks if two atoms are in the same connected component.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the atom pair\
	$cxcalc connected -a 2-3 test.mol

connectedgraph=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:connectedgraph;a=atoms;s=single:false\
	$CONNECTED_GRAPH\
	$Checks if the molecule graph is connected.\
	$-\
	$cxcalc connectedgraph test.mol

bondtype=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:bondtype;a=atoms;s=single:false\
	$BOND_TYPE\
	$The bond type between two atoms.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the bond atoms\
	$cxcalc bondtype -a 2-3 test.mol

chainbond=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:chainbond;a=atoms;s=single:false\
	$CHAIN_BOND\
	$Checks if the bond is a chain bond.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the bond atoms\
	$cxcalc chainbond -a 2-3 test.mol

ringbond=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringbond;a=atoms;s=single:false\
	$RING_BOND\
	$Checks if the bond is a ring bond.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the bond atoms\
	$cxcalc ringbond -a 2-3 test.mol

rotatablebond=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:rotatablebond;a=atoms;s=single:false\
	$ROTATABLE_BOND\
	$Checks if the bond is a rotatable bond.\
	$-a, --atoms=[<atom1>-<atom2>] (1-based) atom indexes of the bond atoms\
	$cxcalc rotatablebond -a 2-3 test.mol

ringcountofatom=$chemaxon.marvin.calculations.TopologyAnalyserPlugin\
	$TopologyAnalyserPlugin.jar\
	$t=type:ringcountofatom;s=single:false\
	$RINGCOUNT_OF_ATOM\
	$Ring counts of atoms.\
	$-\
	$cxcalc ringcountofatoms -a 2-3 test.mol

ioncharge=$chemaxon.marvin.calculations.IonChargePlugin\
	$IonChargePlugin.jar\
	$p=precision:2;H=pH:7;n=max-ions:9;m=min-percent;t=charge-type\
	$IONCHARGE\
	$Partial charge(s):\n  A) on the ionic forms with distribution percentage not less than\n     the minimum percentage specified in the min-percent parameter,\nor else\n  B) on the ionic form with maximal distribution\n     if the min-percent parameter is omitted.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-H, --pH=<pH value> (default: 7);-n, --max-ions=max number of ionizable atoms\nto be considered (default: 9);-m, --min-percent=<min occurrence percentage of ionic form to be considered>\n(optional, if omitted then only the ionic form\nwith max percentage is considered);-t, --charge-type=[single|accumulated] charge type,\naccumulated means that charges of attached H atoms\nshould be added (default: single)\
	$cxcalc ioncharge -n 6 -H 8 -m 1 -t accumulated test.mol

hbda=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$p=precision:2;t=type:acc,don,accsitecount,donsitecount;l=lower:0;u=upper:14;s=step:1;H=pH\
	$HBDA\
	$Hydrogen bond acceptor-donor calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[acc|don|accsitecount|donsitecount|\nacceptorcount|donorcount|msacc|msdon]\n(default: acc,don,accsitecount,donsitecount)\nacc: acceptor multiplicity on atoms\ndon: donor multiplicity on atoms\naccsitecount: acceptor multiplicity in molecule\ndonsitecount: donor multiplicity in molecule\nacceptorcount: number of acceptor atoms in molecule\ndonorcount: number of donor atoms in molecule\nmsacc: average acceptor multiplicity\n    over microspecies by pH\nmsdon: average donor multiplicity\n    over microspecies by pH;-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc hbda -t msacc,msdon -l 2 -u 12 -s 0.5 test.sdf 

acceptor=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$p=precision:2;t=type:acc,acceptorcount,accsitecount,msacc;l=lower:0;u=upper:14;s=step:1;H=pH\
	$ACCEPTOR\
	$Hydrogen bond acceptor calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc acceptor -l 2 -u 12 -s 0.5 test.sdf 

donor=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$p=precision:2;t=type:don,donorcount,donsitecount,msdon;l=lower:0;u=upper:14;s=step:1;H=pH\
	$DONOR\
	$Hydrogen bond donor calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1);-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc donor -l 2 -u 12 -s 0.5 test.sdf 

acc=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:acc;H=pH\
	$ACC\
	$Hydrogen bond acceptor multiplicity calculation on atoms.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc acc test.sdf 

don=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:don;H=pH\
	$DON\
	$Hydrogen bond donor multiplicity calculation on atoms.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc don test.sdf

accsitecount=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:accsitecount;H=pH\
	$ACCCOUNT\
	$Hydrogen bond acceptor multiplicity in molecule.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc accsitecount test.sdf 

donsitecount=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:donsitecount;H=pH\
	$DONCOUNT\
	$Hydrogen bond donor multiplicity in molecule.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc donsitecount test.sdf 

acceptorcount=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:acceptorcount;H=pH\
	$ACCCOUNT\
	$Hydrogen bond acceptor atom count in molecule.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc acceptorcount -H 7.4 test.sdf 

donorcount=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:donorcount;H=pH\
	$DONCOUNT\
	$Hydrogen bond donor atom count in molecule.\
	$-H, --pH=<pH value> takes major microspecies at this pH\n(default: no pH, takes the input molecule)\
	$cxcalc donorcount -H 7.4 test.sdf 

msacc=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:msacc;p=precision:2;l=lower:0;u=upper:14;s=step:1\
	$MSACC\
	$Hydrogen bond acceptor average multiplicity over microspecies by pH.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1)\
	$cxcalc msacc test.sdf 

msdon=$chemaxon.marvin.calculations.HBDAPlugin\
	$HBDAPlugin.jar\
	$t=type:msdon;p=precision:2;l=lower:0;u=upper:14;s=step:1\
	$MSDON\
	$Hydrogen bond donor average multiplicity over microspecies by pH.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-l, --lower=<pH lower limit> (default: 0);-u, --upper=<pH upper limit> (default: 14);-s, --step=<pH step size> (default: 1)\
	$cxcalc msdon test.sdf 

refractivity=$chemaxon.marvin.calculations.RefractivityPlugin\
	$RefractivityPlugin.jar\
	$p=precision:2;t=type:refractivity;i=inch:false\
	$REFRACTIVITY\
	$Refractivity calculation.\
	$-p, --precision=<floating point precision as number of\nfractional digits: 0-8 or inf> (default: 2);-t, --type=[increments|inch|refractivity] (default: refractivity);-i, --inch=[true|false] refractivity on H atoms shown in brackets\n(for incremental refractivity only) (default: false)\
	$cxcalc refractivity -p 3 -t refractivity,increments test.mol
	
#name=$chemaxon.marvin.syng.SyNGPlugin\
#	$SyNGPlugin.jar\
#	$-\
#	$SYNG\
#	$Systematic name generation.\
#	$-\
#	$cxcalc name test.mol 

